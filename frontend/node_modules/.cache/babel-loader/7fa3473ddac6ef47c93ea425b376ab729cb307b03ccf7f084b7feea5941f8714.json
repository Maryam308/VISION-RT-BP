{"ast":null,"code":"import { signUp, signIn, signOut, confirmSignUp, resendSignUpCode, getCurrentUser, fetchAuthSession } from 'aws-amplify/auth';\n\n/**\n* Sign up a new user\n*/\nexport async function signUpUser(username, email, password) {\n  try {\n    const {\n      isSignUpComplete,\n      userId,\n      nextStep\n    } = await signUp({\n      username,\n      password,\n      options: {\n        userAttributes: {\n          email\n        },\n        autoSignIn: true\n      }\n    });\n    return {\n      success: true,\n      isSignUpComplete,\n      userId,\n      nextStep,\n      message: 'Sign up successful! Check your email for verification code.'\n    };\n  } catch (error) {\n    console.error('Sign up error:', error);\n    throw handleAuthError(error);\n  }\n}\n\n/**\n* Confirm sign up with verification code\n*/\nexport async function confirmSignUpUser(username, confirmationCode) {\n  try {\n    const {\n      isSignUpComplete,\n      nextStep\n    } = await confirmSignUp({\n      username,\n      confirmationCode\n    });\n    return {\n      success: true,\n      isSignUpComplete,\n      nextStep,\n      message: 'Account confirmed successfully! You can now sign in.'\n    };\n  } catch (error) {\n    console.error('Confirm sign up error:', error);\n    throw handleAuthError(error);\n  }\n}\n\n/**\n* Resend confirmation code\n*/\nexport async function resendConfirmationCode(username) {\n  try {\n    await resendSignUpCode({\n      username\n    });\n    return {\n      success: true,\n      message: 'Verification code resent successfully!'\n    };\n  } catch (error) {\n    console.error('Resend code error:', error);\n    throw handleAuthError(error);\n  }\n}\n\n/**\n* Sign in a user\n*/\nexport async function signInUser(username, password) {\n  try {\n    const {\n      isSignedIn,\n      nextStep\n    } = await signIn({\n      username,\n      password\n    });\n    if ((nextStep === null || nextStep === void 0 ? void 0 : nextStep.signInStep) === 'CONFIRM_SIGN_UP') {\n      return {\n        success: false,\n        requiresConfirmation: true,\n        message: 'Please confirm your account first. Check your email for the verification code.'\n      };\n    }\n    return {\n      success: true,\n      isSignedIn,\n      nextStep,\n      message: 'Sign in successful!'\n    };\n  } catch (error) {\n    console.error('Sign in error:', error);\n    throw handleAuthError(error);\n  }\n}\n\n/**\n* Sign out the current user\n*/\nexport async function signOutUser() {\n  try {\n    await signOut();\n    return {\n      success: true,\n      message: 'Signed out successfully!'\n    };\n  } catch (error) {\n    console.error('Sign out error:', error);\n    throw handleAuthError(error);\n  }\n}\n\n/**\n* Get the current authenticated user\n*/\nexport async function getCurrentAuthUser() {\n  try {\n    const user = await getCurrentUser();\n    return {\n      success: true,\n      user\n    };\n  } catch (error) {\n    console.error('Get current user error:', error);\n    return {\n      success: false,\n      user: null\n    };\n  }\n}\n\n/**\n* Get the current auth session (tokens)\n*/\nexport async function getAuthSession() {\n  try {\n    const session = await fetchAuthSession();\n    return {\n      success: true,\n      session\n    };\n  } catch (error) {\n    console.error('Get session error:', error);\n    return {\n      success: false,\n      session: null\n    };\n  }\n}\n\n/**\n* Handle and format authentication errors\n*/\nfunction handleAuthError(error) {\n  const errorMessages = {\n    'UsernameExistsException': 'An account with this username already exists.',\n    'InvalidParameterException': 'Invalid parameters provided. Please check your input.',\n    'InvalidPasswordException': 'Password does not meet requirements. Must be at least 8 characters with uppercase, lowercase, number, and symbol.',\n    'CodeMismatchException': 'Invalid verification code. Please try again.',\n    'ExpiredCodeException': 'Verification code has expired. Please request a new one.',\n    'NotAuthorizedException': 'Incorrect username or password.',\n    'UserNotConfirmedException': 'Please verify your account. Check your email for the verification code.',\n    'UserNotFoundException': 'User not found. Please check your username.',\n    'TooManyRequestsException': 'Too many attempts. Please try again later.',\n    'LimitExceededException': 'Attempt limit exceeded. Please try again later.'\n  };\n  const errorMessage = errorMessages[error.name] || error.message || 'An authentication error occurred.';\n  const formattedError = new Error(errorMessage);\n  formattedError.name = error.name;\n  formattedError.originalError = error;\n  return formattedError;\n}\n\n// Create service object for backward compatibility\nconst authService = {\n  signUp: signUpUser,\n  confirmSignUp: confirmSignUpUser,\n  resendConfirmationCode: resendConfirmationCode,\n  signIn: signInUser,\n  signOut: signOutUser,\n  getCurrentUser: getCurrentAuthUser,\n  getSession: getAuthSession\n};\nexport default authService;","map":{"version":3,"names":["signUp","signIn","signOut","confirmSignUp","resendSignUpCode","getCurrentUser","fetchAuthSession","signUpUser","username","email","password","isSignUpComplete","userId","nextStep","options","userAttributes","autoSignIn","success","message","error","console","handleAuthError","confirmSignUpUser","confirmationCode","resendConfirmationCode","signInUser","isSignedIn","signInStep","requiresConfirmation","signOutUser","getCurrentAuthUser","user","getAuthSession","session","errorMessages","errorMessage","name","formattedError","Error","originalError","authService","getSession"],"sources":["/Users/fatimaali/Desktop/VISION-RT-BP/frontend/src/services/authService.js"],"sourcesContent":["\nimport { \n  signUp, \n  signIn, \n  signOut, \n  confirmSignUp, \n  resendSignUpCode,\n  getCurrentUser,\n  fetchAuthSession\n} from 'aws-amplify/auth';\n \n/**\n* Sign up a new user\n*/\nexport async function signUpUser(username, email, password) {\n  try {\n    const { isSignUpComplete, userId, nextStep } = await signUp({\n      username,\n      password,\n      options: {\n        userAttributes: {\n          email\n        },\n        autoSignIn: true\n      }\n    });\n    return {\n      success: true,\n      isSignUpComplete,\n      userId,\n      nextStep,\n      message: 'Sign up successful! Check your email for verification code.'\n    };\n  } catch (error) {\n    console.error('Sign up error:', error);\n    throw handleAuthError(error);\n  }\n}\n \n/**\n* Confirm sign up with verification code\n*/\nexport async function confirmSignUpUser(username, confirmationCode) {\n  try {\n    const { isSignUpComplete, nextStep } = await confirmSignUp({\n      username,\n      confirmationCode\n    });\n    return {\n      success: true,\n      isSignUpComplete,\n      nextStep,\n      message: 'Account confirmed successfully! You can now sign in.'\n    };\n  } catch (error) {\n    console.error('Confirm sign up error:', error);\n    throw handleAuthError(error);\n  }\n}\n \n/**\n* Resend confirmation code\n*/\nexport async function resendConfirmationCode(username) {\n  try {\n    await resendSignUpCode({ username });\n    return {\n      success: true,\n      message: 'Verification code resent successfully!'\n    };\n  } catch (error) {\n    console.error('Resend code error:', error);\n    throw handleAuthError(error);\n  }\n}\n \n/**\n* Sign in a user\n*/\nexport async function signInUser(username, password) {\n  try {\n    const { isSignedIn, nextStep } = await signIn({\n      username,\n      password\n    });\n    if (nextStep?.signInStep === 'CONFIRM_SIGN_UP') {\n      return {\n        success: false,\n        requiresConfirmation: true,\n        message: 'Please confirm your account first. Check your email for the verification code.'\n      };\n    }\n    return {\n      success: true,\n      isSignedIn,\n      nextStep,\n      message: 'Sign in successful!'\n    };\n  } catch (error) {\n    console.error('Sign in error:', error);\n    throw handleAuthError(error);\n  }\n}\n \n/**\n* Sign out the current user\n*/\nexport async function signOutUser() {\n  try {\n    await signOut();\n    return {\n      success: true,\n      message: 'Signed out successfully!'\n    };\n  } catch (error) {\n    console.error('Sign out error:', error);\n    throw handleAuthError(error);\n  }\n}\n \n/**\n* Get the current authenticated user\n*/\nexport async function getCurrentAuthUser() {\n  try {\n    const user = await getCurrentUser();\n    return {\n      success: true,\n      user\n    };\n  } catch (error) {\n    console.error('Get current user error:', error);\n    return {\n      success: false,\n      user: null\n    };\n  }\n}\n \n/**\n* Get the current auth session (tokens)\n*/\nexport async function getAuthSession() {\n  try {\n    const session = await fetchAuthSession();\n    return {\n      success: true,\n      session\n    };\n  } catch (error) {\n    console.error('Get session error:', error);\n    return {\n      success: false,\n      session: null\n    };\n  }\n}\n \n/**\n* Handle and format authentication errors\n*/\nfunction handleAuthError(error) {\n  const errorMessages = {\n    'UsernameExistsException': 'An account with this username already exists.',\n    'InvalidParameterException': 'Invalid parameters provided. Please check your input.',\n    'InvalidPasswordException': 'Password does not meet requirements. Must be at least 8 characters with uppercase, lowercase, number, and symbol.',\n    'CodeMismatchException': 'Invalid verification code. Please try again.',\n    'ExpiredCodeException': 'Verification code has expired. Please request a new one.',\n    'NotAuthorizedException': 'Incorrect username or password.',\n    'UserNotConfirmedException': 'Please verify your account. Check your email for the verification code.',\n    'UserNotFoundException': 'User not found. Please check your username.',\n    'TooManyRequestsException': 'Too many attempts. Please try again later.',\n    'LimitExceededException': 'Attempt limit exceeded. Please try again later.'\n  };\n \n  const errorMessage = errorMessages[error.name] || error.message || 'An authentication error occurred.';\n  const formattedError = new Error(errorMessage);\n  formattedError.name = error.name;\n  formattedError.originalError = error;\n  return formattedError;\n}\n \n// Create service object for backward compatibility\nconst authService = {\n  signUp: signUpUser,\n  confirmSignUp: confirmSignUpUser,\n  resendConfirmationCode: resendConfirmationCode,\n  signIn: signInUser,\n  signOut: signOutUser,\n  getCurrentUser: getCurrentAuthUser,\n  getSession: getAuthSession\n};\n \nexport default authService;"],"mappings":"AACA,SACEA,MAAM,EACNC,MAAM,EACNC,OAAO,EACPC,aAAa,EACbC,gBAAgB,EAChBC,cAAc,EACdC,gBAAgB,QACX,kBAAkB;;AAEzB;AACA;AACA;AACA,OAAO,eAAeC,UAAUA,CAACC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,EAAE;EAC1D,IAAI;IACF,MAAM;MAAEC,gBAAgB;MAAEC,MAAM;MAAEC;IAAS,CAAC,GAAG,MAAMb,MAAM,CAAC;MAC1DQ,QAAQ;MACRE,QAAQ;MACRI,OAAO,EAAE;QACPC,cAAc,EAAE;UACdN;QACF,CAAC;QACDO,UAAU,EAAE;MACd;IACF,CAAC,CAAC;IACF,OAAO;MACLC,OAAO,EAAE,IAAI;MACbN,gBAAgB;MAChBC,MAAM;MACNC,QAAQ;MACRK,OAAO,EAAE;IACX,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,MAAME,eAAe,CAACF,KAAK,CAAC;EAC9B;AACF;;AAEA;AACA;AACA;AACA,OAAO,eAAeG,iBAAiBA,CAACd,QAAQ,EAAEe,gBAAgB,EAAE;EAClE,IAAI;IACF,MAAM;MAAEZ,gBAAgB;MAAEE;IAAS,CAAC,GAAG,MAAMV,aAAa,CAAC;MACzDK,QAAQ;MACRe;IACF,CAAC,CAAC;IACF,OAAO;MACLN,OAAO,EAAE,IAAI;MACbN,gBAAgB;MAChBE,QAAQ;MACRK,OAAO,EAAE;IACX,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAME,eAAe,CAACF,KAAK,CAAC;EAC9B;AACF;;AAEA;AACA;AACA;AACA,OAAO,eAAeK,sBAAsBA,CAAChB,QAAQ,EAAE;EACrD,IAAI;IACF,MAAMJ,gBAAgB,CAAC;MAAEI;IAAS,CAAC,CAAC;IACpC,OAAO;MACLS,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE;IACX,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAME,eAAe,CAACF,KAAK,CAAC;EAC9B;AACF;;AAEA;AACA;AACA;AACA,OAAO,eAAeM,UAAUA,CAACjB,QAAQ,EAAEE,QAAQ,EAAE;EACnD,IAAI;IACF,MAAM;MAAEgB,UAAU;MAAEb;IAAS,CAAC,GAAG,MAAMZ,MAAM,CAAC;MAC5CO,QAAQ;MACRE;IACF,CAAC,CAAC;IACF,IAAI,CAAAG,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEc,UAAU,MAAK,iBAAiB,EAAE;MAC9C,OAAO;QACLV,OAAO,EAAE,KAAK;QACdW,oBAAoB,EAAE,IAAI;QAC1BV,OAAO,EAAE;MACX,CAAC;IACH;IACA,OAAO;MACLD,OAAO,EAAE,IAAI;MACbS,UAAU;MACVb,QAAQ;MACRK,OAAO,EAAE;IACX,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,MAAME,eAAe,CAACF,KAAK,CAAC;EAC9B;AACF;;AAEA;AACA;AACA;AACA,OAAO,eAAeU,WAAWA,CAAA,EAAG;EAClC,IAAI;IACF,MAAM3B,OAAO,CAAC,CAAC;IACf,OAAO;MACLe,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE;IACX,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvC,MAAME,eAAe,CAACF,KAAK,CAAC;EAC9B;AACF;;AAEA;AACA;AACA;AACA,OAAO,eAAeW,kBAAkBA,CAAA,EAAG;EACzC,IAAI;IACF,MAAMC,IAAI,GAAG,MAAM1B,cAAc,CAAC,CAAC;IACnC,OAAO;MACLY,OAAO,EAAE,IAAI;MACbc;IACF,CAAC;EACH,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO;MACLF,OAAO,EAAE,KAAK;MACdc,IAAI,EAAE;IACR,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA,OAAO,eAAeC,cAAcA,CAAA,EAAG;EACrC,IAAI;IACF,MAAMC,OAAO,GAAG,MAAM3B,gBAAgB,CAAC,CAAC;IACxC,OAAO;MACLW,OAAO,EAAE,IAAI;MACbgB;IACF,CAAC;EACH,CAAC,CAAC,OAAOd,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,OAAO;MACLF,OAAO,EAAE,KAAK;MACdgB,OAAO,EAAE;IACX,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA,SAASZ,eAAeA,CAACF,KAAK,EAAE;EAC9B,MAAMe,aAAa,GAAG;IACpB,yBAAyB,EAAE,+CAA+C;IAC1E,2BAA2B,EAAE,uDAAuD;IACpF,0BAA0B,EAAE,mHAAmH;IAC/I,uBAAuB,EAAE,8CAA8C;IACvE,sBAAsB,EAAE,0DAA0D;IAClF,wBAAwB,EAAE,iCAAiC;IAC3D,2BAA2B,EAAE,yEAAyE;IACtG,uBAAuB,EAAE,6CAA6C;IACtE,0BAA0B,EAAE,4CAA4C;IACxE,wBAAwB,EAAE;EAC5B,CAAC;EAED,MAAMC,YAAY,GAAGD,aAAa,CAACf,KAAK,CAACiB,IAAI,CAAC,IAAIjB,KAAK,CAACD,OAAO,IAAI,mCAAmC;EACtG,MAAMmB,cAAc,GAAG,IAAIC,KAAK,CAACH,YAAY,CAAC;EAC9CE,cAAc,CAACD,IAAI,GAAGjB,KAAK,CAACiB,IAAI;EAChCC,cAAc,CAACE,aAAa,GAAGpB,KAAK;EACpC,OAAOkB,cAAc;AACvB;;AAEA;AACA,MAAMG,WAAW,GAAG;EAClBxC,MAAM,EAAEO,UAAU;EAClBJ,aAAa,EAAEmB,iBAAiB;EAChCE,sBAAsB,EAAEA,sBAAsB;EAC9CvB,MAAM,EAAEwB,UAAU;EAClBvB,OAAO,EAAE2B,WAAW;EACpBxB,cAAc,EAAEyB,kBAAkB;EAClCW,UAAU,EAAET;AACd,CAAC;AAED,eAAeQ,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}